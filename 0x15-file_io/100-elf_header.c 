#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <elf.h>

#include "main.h"

/**
 * main - Displays the information contained in the ELF header at the start of
 *        an ELF file.
 *
 * @argc: Number of arguments.
 * @argv: Array of arguments.
 *
 * Return: 0 on success, 98 on failure.
 */
int main(int argc, char **argv)
{
	int fd;
	Elf64_Ehdr header;

	if (argc != 2)
	{
		fprintf(stderr, "Usage: %s elf_filename\n", argv[0]);
		exit(98);
	}

	fd = open(argv[1], O_RDONLY);
	if (fd == -1)
	{
		fprintf(stderr, "Error: cannot open file %s\n", argv[1]);
		exit(98);
	}

	if (read(fd, &header, sizeof(header)) != sizeof(header))
	{
		fprintf(stderr, "Error: cannot read ELF header from file %s\n", argv[1]);
		exit(98);
	}

	if (header.e_ident[EI_MAG0] != ELFMAG0 ||
	    header.e_ident[EI_MAG1] != ELFMAG1 ||
	    header.e_ident[EI_MAG2] != ELFMAG2 ||
	    header.e_ident[EI_MAG3] != ELFMAG3)
	{
		fprintf(stderr, "Error: file %s is not an ELF file\n", argv[1]);
		exit(98);
	}

	printf("  Magic:   ");
	print_magic(header.e_ident);
	printf("  Class:                             ");
	print_class(header.e_ident[EI_CLASS]);
	printf("  Data:                              ");
	print_data(header.e_ident[EI_DATA]);
	printf("  Version:                           %d (current)\n", header.e_ident[EI_VERSION]);
	printf("  OS/ABI:                            ");
	print_osabi(header.e_ident[EI_OSABI]);
	printf("  ABI Version:                       %d\n", header.e_ident[EI_ABIVERSION]);
	printf("  Type:                              ");
	print_type(header.e_type);
	printf("  Entry point address:               %#lx\n", (unsigned long) header.e_entry);

	return (0);
}

/**
 * print_magic - Prints the magic numbers of the ELF header.
 *
 * @ident: Array containing the magic numbers.
 */
void print_magic(unsigned char *ident)
{
	int i;

	for (i = 0; i < EI_NIDENT; i++)
		printf("%02x ", ident[i]);
	printf("\n");
}

/**
 * print_class - Prints the class of the ELF header.
 *
 * @class: The class of the ELF header.
 */
void print_class(unsigned char class)
{
	if (class == ELFCLASS32)
		printf("ELF32\n");
	else if (class == ELFCLASS64)
		printf("ELF64\n");
	else
		printf("<unknown: %x>\n", class);
}

/**
 * print_data - Prints the data encoding of the ELF header.
 *
 * @data: The data encoding of the ELF header.
 */
void print_data(unsigned char data)
{
	if (data == ELFDATA2LSB)
		printf("2's complement, little endian\n");
	else if (data == ELFDATA2MSB)
		printf("2's complement, big endian\n");
	else
		printf("<unknown: %x>\n", data);
}

/**
 * print_osabi - Prints the operating system and ABI of the ELF header.
 *
 * @osabi: The operating system and ABI of the ELF header.
 */
void print_osabi(unsigned char osabi)
{
	switch (osabi)
	{
	case ELFOSABI_SYSV:
		printf("UNIX - System V\n");
		break;
	case ELFOSABI_HPUX:
		printf("UNIX - HP-UX\n");
		break;
	case ELFOSABI_NETBSD:
		printf("UNIX - NetBSD\n");
		break;
	case ELFOSABI_LINUX:
		printf("UNIX - Linux\n");
		break;
	case ELFOSABI_SOLARIS:
		printf("UNIX - Solaris\n");
		break;
	case ELFOSABI_AIX:
		printf("UNIX - AIX\n");
		break;
	case ELFOSABI_IRIX:
		printf("UNIX - IRIX\n");
		break;
	case ELFOSABI_FREEBSD:
		printf("UNIX - FreeBSD\n");
		break;
	case ELFOSABI_TRU64:
		printf("UNIX - TRU64\n");
		break;
	case ELFOSABI_MODESTO:
		printf("Novell - Modesto\n");
		break;
	case ELFOSABI_OPENBSD:
		printf("UNIX - OpenBSD\n");
		break;
	default:
		printf("<unknown: %x>\n", osabi);
		break;
	}
}


/**
 * print_type - Prints the type of the ELF header.
 *
 * @type: The type of the ELF header.
 */
void print_type(unsigned int type)
{
	switch (type)
	{
	case ET_NONE:
		printf("NONE (Unknown type)\n");
		break;
	case ET_REL:
		printf("REL (Relocatable file)\n");
		break;
	case ET_EXEC:
		printf("EXEC (Executable file)\n");
		break;
	case ET_DYN:
		printf("DYN (Shared object file)\n");
		break;
	case ET_CORE:
		printf("CORE (Core file)\n");
		break;
	default:
		printf("<unknown: %x>\n", type);
		break;
	}
}